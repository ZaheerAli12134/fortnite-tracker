{"ast":null,"code":"// Mock data for Fortnite cosmetics\nconst mockCosmetics = [\n// Skins\n{\n  id: 1,\n  name: 'Renegade Raider',\n  type: 'skin',\n  rarity: 'rare',\n  lastSeen: 45,\n  price: 1200\n}, {\n  id: 2,\n  name: 'Aerial Assault Trooper',\n  type: 'skin',\n  rarity: 'rare',\n  lastSeen: 60,\n  price: 1200\n}, {\n  id: 3,\n  name: 'Ghoul Trooper',\n  type: 'skin',\n  rarity: 'epic',\n  lastSeen: 15,\n  price: 1500\n}, {\n  id: 4,\n  name: 'Skull Trooper',\n  type: 'skin',\n  rarity: 'epic',\n  lastSeen: 30,\n  price: 1500\n}, {\n  id: 5,\n  name: 'Peely',\n  type: 'skin',\n  rarity: 'legendary',\n  lastSeen: 5,\n  price: 2000\n}, {\n  id: 6,\n  name: 'Midas',\n  type: 'skin',\n  rarity: 'legendary',\n  lastSeen: 90,\n  price: 2000\n},\n// Emotes\n{\n  id: 7,\n  name: 'Orange Justice',\n  type: 'emote',\n  rarity: 'rare',\n  lastSeen: 25,\n  price: 800\n}, {\n  id: 8,\n  name: 'Floss',\n  type: 'emote',\n  rarity: 'rare',\n  lastSeen: 40,\n  price: 800\n}, {\n  id: 9,\n  name: 'Take the L',\n  type: 'emote',\n  rarity: 'epic',\n  lastSeen: 10,\n  price: 800\n}, {\n  id: 10,\n  name: 'Fresh',\n  type: 'emote',\n  rarity: 'epic',\n  lastSeen: 20,\n  price: 800\n}, {\n  id: 11,\n  name: 'Scenario',\n  type: 'emote',\n  rarity: 'legendary',\n  lastSeen: 5,\n  price: 1200\n},\n// Pickaxes\n{\n  id: 12,\n  name: 'Reaper',\n  type: 'pickaxe',\n  rarity: 'rare',\n  lastSeen: 35,\n  price: 800\n}, {\n  id: 13,\n  name: 'AC/DC',\n  type: 'pickaxe',\n  rarity: 'rare',\n  lastSeen: 50,\n  price: 800\n}, {\n  id: 14,\n  name: 'Vision',\n  type: 'pickaxe',\n  rarity: 'epic',\n  lastSeen: 15,\n  price: 1200\n}, {\n  id: 15,\n  name: 'Star Wand',\n  type: 'pickaxe',\n  rarity: 'epic',\n  lastSeen: 8,\n  price: 1200\n}, {\n  id: 16,\n  name: 'Ice Breaker',\n  type: 'pickaxe',\n  rarity: 'legendary',\n  lastSeen: 2,\n  price: 1500\n}];\nexport const searchCosmetics = async (searchTerm, type = 'all') => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  return mockCosmetics.filter(cosmetic => {\n    const matchesSearch = cosmetic.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = type === 'all' || cosmetic.type === type;\n    return matchesSearch && matchesType;\n  });\n};\nexport const getCosmeticById = async id => {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  return mockCosmetics.find(cosmetic => cosmetic.id === id);\n};","map":{"version":3,"names":["mockCosmetics","id","name","type","rarity","lastSeen","price","searchCosmetics","searchTerm","Promise","resolve","setTimeout","filter","cosmetic","matchesSearch","toLowerCase","includes","matchesType","getCosmeticById","find"],"sources":["/home/paq/Desktop/fortnite/fortnite-tracker/src/utils/fortniteData.js"],"sourcesContent":["// Mock data for Fortnite cosmetics\nconst mockCosmetics = [\n  // Skins\n  { id: 1, name: 'Renegade Raider', type: 'skin', rarity: 'rare', lastSeen: 45, price: 1200 },\n  { id: 2, name: 'Aerial Assault Trooper', type: 'skin', rarity: 'rare', lastSeen: 60, price: 1200 },\n  { id: 3, name: 'Ghoul Trooper', type: 'skin', rarity: 'epic', lastSeen: 15, price: 1500 },\n  { id: 4, name: 'Skull Trooper', type: 'skin', rarity: 'epic', lastSeen: 30, price: 1500 },\n  { id: 5, name: 'Peely', type: 'skin', rarity: 'legendary', lastSeen: 5, price: 2000 },\n  { id: 6, name: 'Midas', type: 'skin', rarity: 'legendary', lastSeen: 90, price: 2000 },\n  \n  // Emotes\n  { id: 7, name: 'Orange Justice', type: 'emote', rarity: 'rare', lastSeen: 25, price: 800 },\n  { id: 8, name: 'Floss', type: 'emote', rarity: 'rare', lastSeen: 40, price: 800 },\n  { id: 9, name: 'Take the L', type: 'emote', rarity: 'epic', lastSeen: 10, price: 800 },\n  { id: 10, name: 'Fresh', type: 'emote', rarity: 'epic', lastSeen: 20, price: 800 },\n  { id: 11, name: 'Scenario', type: 'emote', rarity: 'legendary', lastSeen: 5, price: 1200 },\n  \n  // Pickaxes\n  { id: 12, name: 'Reaper', type: 'pickaxe', rarity: 'rare', lastSeen: 35, price: 800 },\n  { id: 13, name: 'AC/DC', type: 'pickaxe', rarity: 'rare', lastSeen: 50, price: 800 },\n  { id: 14, name: 'Vision', type: 'pickaxe', rarity: 'epic', lastSeen: 15, price: 1200 },\n  { id: 15, name: 'Star Wand', type: 'pickaxe', rarity: 'epic', lastSeen: 8, price: 1200 },\n  { id: 16, name: 'Ice Breaker', type: 'pickaxe', rarity: 'legendary', lastSeen: 2, price: 1500 }\n];\n\nexport const searchCosmetics = async (searchTerm, type = 'all') => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  return mockCosmetics.filter(cosmetic => {\n    const matchesSearch = cosmetic.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = type === 'all' || cosmetic.type === type;\n    return matchesSearch && matchesType;\n  });\n};\n\nexport const getCosmeticById = async (id) => {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  return mockCosmetics.find(cosmetic => cosmetic.id === id);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}